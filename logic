struct Field {
    let size : Int
    init(size : Int) {
        self.size = size
    }
    func isValidCell(column: Int, row: Int) -> Bool {
        if column < 0 || column >= size {
            return false
        }
        if row < 0 || row >= size {
            return false
        }
        return true
    }
}

class Game {
    let field : Field
    let noWinner = "Still no winner! Next turn"
    var grid: [[Symbol]]
    var winner = true
    
    enum Symbol : String {
        case Cross = "❌"
        case Zero  = "⭕️"
        case Empty = "⬜"
    }
    
    init(fieldSize: Int) {
        self.field = Field(size: fieldSize)
        grid = Array(repeating: Array(repeatElement(Symbol.Empty, count: fieldSize)), count: fieldSize)
    }
    
    
    func printField() {
        for row in grid {
            for cell in row {
                print(cell.rawValue, terminator: "")
            }
            print()
        }
        print()
    }
    
    subscript(column: Int, row: Int) -> Symbol {
        get {
            if !field.isValidCell(column: column, row: row) {
                return Symbol.Empty
            }
            return grid[row][column]
        }
        set {
            if !field.isValidCell(column: column, row: row) {
                return
            }
            if grid[row][column] != Symbol.Empty {
                print("Cell is not Empty")
                return
            }
            grid[row][column] = newValue
        }
    }
    
    func clearBoard() {
        for row in 0..<field.size {
            for column in 0..<field.size {
                grid[row][column] = Symbol.Empty
            }
        }
    }
    
    func checkWinner() {
        for row in 0..<field.size {
            if grid[row][0] != Symbol.Empty {
                winner = true
                for column in 1..<field.size {
                    if grid[row][column] != grid[row][0] {
                        winner = false
                        break
                    }
                }
                if winner {
                    print("Winner is \(grid[row][0].rawValue)")
                    return
                }
            }
        }
        for column in 0..<field.size {
            if grid[0][column] != Symbol.Empty {
                winner = true
                for row in 1..<field.size {
                    if grid[row][column] != grid[0][column] {
                        winner = false
                        break
                    }
                }
                if winner {
                    print("Winner is \(grid[0][column].rawValue)")
                    return
                }
            }
        }
        
        let size = field.size - 1
        for i in 0..<field.size {
            if grid [i][i] != grid[size][size] || grid[size][size] == Symbol.Empty {
                winner = false
                break
            }
        }
        if winner {
            print("Winner is \(grid[size][size].rawValue)")
            return
        }
        
        winner = true
        for i in 0..<field.size {
            if grid[i][size - i] != grid[size][0] || grid[size][0] == Symbol.Empty {
                    winner = false
            }
        }
        
        if winner {
            print("Winner is \(grid[0][size].rawValue)")
            return
        }
        print(noWinner)
    }
}
  
var game = Game(fieldSize: 5)

// *** zero wins ***

//game [0, 4] = .Cross
//game [0, 1] = .Zero
//game [1, 3] = .Cross
//game [1, 1] = .Zero
//game [2, 2] = .Cross
//game [4, 1] = .Zero
//game [2, 1] = .Zero
//game [3, 1] = .Zero
//
game [0, 4] = .Cross
game [1, 3] = .Cross
game [2, 2] = .Cross
game [3, 1] = .Cross
game [4, 0] = .Cross

//*** diagonal crosses wins ***

//game [0, 0] = .Cross
//game [1, 1] = .Cross
//game [2, 2] = .Zero
//game [3, 3] = .Cross
//game [4, 4] = .Cross
//game.printField()
//game.checkWinner()
//game.clearBoard()
game.printField()
game.checkWinner()

